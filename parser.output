Terminals unused in grammar

    CHAR
    _NULL
    GOTO
    VOID
    DEFAULT
    ASSERT
    VOLATILE
    NEW


Rules useless in parser due to conflicts

  135 bexpr_: bexpr_ RELOP bexpr_


State 77 conflicts: 4 reduce/reduce
State 82 conflicts: 4 reduce/reduce
State 196 conflicts: 5 reduce/reduce
State 197 conflicts: 5 reduce/reduce
State 198 conflicts: 2 shift/reduce, 4 reduce/reduce
State 199 conflicts: 2 shift/reduce
State 201 conflicts: 5 reduce/reduce
State 202 conflicts: 7 shift/reduce, 5 reduce/reduce
State 243 conflicts: 1 reduce/reduce
State 273 conflicts: 7 shift/reduce, 5 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: fundef
    2        | sstmts
    3        | fundef sstmts

    4 sstmts: sstmt sstmts
    5       | cstmt sstmts
    6       | sstmt
    7       | cstmt

    8 sstmt: varDeclare
    9      | varAssign termination
   10      | input
   11      | ret
   12      | println
   13      | print
   14      | import
   15      | const
   16      | incdec
   17      | termination
   18      | funcall termination
   19      | breakstmt
   20      | constmt

   21 cstmt: ifstmt
   22      | while
   23      | dowhilestmt
   24      | forloop
   25      | switchstmt

   26 while: WHILE '(' expr ')' '{' sstmts '}'

   27 dowhilestmt: DO '{' sstmts '}' WHILE '(' expr ')' termination

   28 ret: RET comp termination

   29 comp: %empty
   30     | expr

   31 expr: aexpr
   32     | bexpr
   33     | terms
   34     | elvisop

   35 println: PRINTLN expr termination

   36 print: PRINT expr termination

   37 import: IMPORT t termination
   38       | IMPORT STATIC t

   39 t: ID DOT t
   40  | ID DOT MUL
   41  | ID termination
   42  | ID AS ID

   43 const: CONST ID EQ terms termination

   44 varDeclare: DT E termination
   45           | DEF E termination
   46           | DEF ID EQ '[' H ']' termination
   47           | mulDeclare

   48 mulDeclare: DEF '(' G ')' EQ '[' H ']' termination

   49 E: ID COMMA E
   50  | ID EQ expr COMMA E
   51  | ID
   52  | ID EQ expr

   53 varAssign: ID EQ expr
   54          | ID EQ '[' H ']'
   55          | mulAssign
   56          | ID op EQ terms
   57          | ID elvisassignmentop terms

   58 mulAssign: '(' G ')' EQ '[' H ']'

   59 G: ID COMMA G
   60  | DT ID COMMA G
   61  | DT ID
   62  | ID

   63 H: '[' H ']' COMMA H
   64  | terms COMMA H
   65  | terms
   66  | '[' H ']'

   67 input: DEF ID EQ infunction termination
   68      | DEF ID EQ infunction AS DT termination
   69      | DEF ID EQ SYSTEM DOT IN DOT CONSOLE '(' ')' DOT READLINE '(' ')' termination
   70      | DEF ID EQ ID DOT READLINE '(' ')' termination
   71      | ID EQ ID DOT READLINE '(' ')' termination
   72      | infunction
   73      | ID EQ infunction termination
   74      | ID EQ infunction AS DT termination

   75 infunction: SYSTEM DOT IN DOT NEWREADER '(' ')' DOT READLINE '(' ')'

   76 forloop: FOR '(' forstmt ')' forpart

   77 forpart: '{' sstmts '}'
   78        | sstmt

   79 forstmt: a TERM b TERM incdec
   80        | a TERM b TERM varAssign
   81        | var IN var

   82 a: %empty
   83  | var EQ terms
   84  | DT var EQ terms
   85  | DEF var EQ terms

   86 b: %empty
   87  | bexpr

   88 var: ID
   89    | arr

   90 arr: ID dims

   91 dims: dims dim
   92     | dim

   93 dim: '[' ID ']'
   94    | '[' INT ']'

   95 incdec: var INC
   96       | var DEC

   97 fundef: DT ID '(' arglist ')' '{' sstmts '}'
   98       | DEF ID '(' arglist ')' '{' sstmts '}'

   99 arglist: arglist COMMA arg
  100        | arg

  101 arg: %empty
  102    | DT ID
  103    | DT ID EQ expr

  104 funcall: ID '(' argumentlist ')'
  105        | ID '(' ')'

  106 argumentlist: argumentlist COMMA terms
  107             | terms

  108 ifstmt: IF '(' expr ')' then
  109       | IF '(' expr ')' then ELSE then
  110       | IF '(' expr ')' then ELSE ifstmt

  111 then: '{' sstmts '}'
  112     | sstmt

  113 switchstmt: SWITCH '(' expr ')' '{' cases '}'

  114 cases: %empty
  115      | cases case

  116 case: CASE terms COLON sstmts

  117 breakstmt: BREAK termination

  118 constmt: CONTINUE termination

  119 aexpr: terms op terms
  120      | terms BITOP terms
  121      | '(' aexpr ')'
  122      | aexpr op aexpr
  123      | aexpr BITOP aexpr
  124      | '(' terms ')'

  125 op: PLUS
  126   | MIN
  127   | DIV
  128   | MUL
  129   | MOD
  130   | POW

  131 bexpr: bexpr_ RELOP bexpr_
  132      | bexpr_ logop bexpr_
  133      | '(' bexpr ')'
  134      | NOT bexpr_

  135 bexpr_: bexpr_ RELOP bexpr_
  136       | bexpr_ LOGOP bexpr_
  137       | terms
  138       | aexpr

  139 logop: AND
  140      | OR

  141 terstmt: expr QUES terms COLON terms

  142 elvisop: expr QUES COLON terms

  143 elvisassignmentop: QUES EQ

  144 terms: INT
  145      | REAL
  146      | var
  147      | TRUE
  148      | FALSE
  149      | STRING
  150      | terstmt

  151 termination: TERM


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 26 27 48 58 69 70 71 75 76 97 98 104 105 108 109 110 113 121 124 133
    ')' (41) 26 27 48 58 69 70 71 75 76 97 98 104 105 108 109 110 113 121 124 133
    '[' (91) 46 48 54 58 63 66 93 94
    ']' (93) 46 48 54 58 63 66 93 94
    '{' (123) 26 27 77 97 98 111 113
    '}' (125) 26 27 77 97 98 111 113
    error (256)
    ID (258) 39 40 41 42 43 46 49 50 51 52 53 54 56 57 59 60 61 62 67 68 69 70 71 73 74 88 90 93 97 98 102 103 104 105
    REAL (259) 145
    INT (260) 94 144
    STRING (261) 149
    CHAR (262)
    IF (263) 108 109 110
    FOR (264) 76
    WHILE (265) 26 27
    DO (266) 27
    SWITCH (267) 113
    RET (268) 28
    BREAK (269) 117
    TRUE (270) 147
    FALSE (271) 148
    _NULL (272)
    CASE (273) 116
    GOTO (274)
    IMPORT (275) 37 38
    VOID (276)
    CONTINUE (277) 118
    STATIC (278) 38
    DEFAULT (279)
    PRINTLN (280) 35
    PRINT (281) 36
    DEF (282) 45 46 48 67 68 69 70 85 98
    IN (283) 69 75 81
    ASSERT (284)
    VOLATILE (285)
    CONST (286) 43
    CONSOLE (287) 69
    SYSTEM (288) 69 75
    TERM (289) 79 80 151
    COLON (290) 116 141 142
    NEW (291)
    NEWREADER (292) 75
    READLINE (293) 69 70 71 75
    DOT (294) 39 40 69 70 71 75
    DT (295) 44 60 61 68 74 84 97 102 103
    COMMA (296) 49 50 59 60 63 64 99 106
    shift (297)
    PLUS (298) 125
    MIN (299) 126
    MUL (300) 40 128
    DIV (301) 127
    POW (302) 130
    EQ (303) 43 46 48 50 52 53 54 56 58 67 68 69 70 71 73 74 83 84 85 103 143
    RELOP (304) 131 135
    LOGOP (305) 136
    BITOP (306) 120 123
    QUES (307) 141 142 143
    AS (308) 42 68 74
    MOD (309) 129
    AND (310) 139
    OR (311) 140
    NOT (312) 134
    INC (313) 95
    DEC (314) 96
    NOELSE (315)
    ELSE (316) 109 110


Nonterminals, with rules where they appear

    $accept (68)
        on left: 0
    program (69)
        on left: 1 2 3
        on right: 0
    sstmts (70)
        on left: 4 5 6 7
        on right: 2 3 4 5 26 27 77 97 98 111 116
    sstmt (71)
        on left: 8 9 10 11 12 13 14 15 16 17 18 19 20
        on right: 4 6 78 112
    cstmt (72)
        on left: 21 22 23 24 25
        on right: 5 7
    while (73)
        on left: 26
        on right: 22
    dowhilestmt (74)
        on left: 27
        on right: 23
    ret (75)
        on left: 28
        on right: 11
    comp (76)
        on left: 29 30
        on right: 28
    expr (77)
        on left: 31 32 33 34
        on right: 26 27 30 35 36 50 52 53 103 108 109 110 113 141 142
    println (78)
        on left: 35
        on right: 12
    print (79)
        on left: 36
        on right: 13
    import (80)
        on left: 37 38
        on right: 14
    t (81)
        on left: 39 40 41 42
        on right: 37 38 39
    const (82)
        on left: 43
        on right: 15
    varDeclare (83)
        on left: 44 45 46 47
        on right: 8
    mulDeclare (84)
        on left: 48
        on right: 47
    E (85)
        on left: 49 50 51 52
        on right: 44 45 49 50
    varAssign (86)
        on left: 53 54 55 56 57
        on right: 9 80
    mulAssign (87)
        on left: 58
        on right: 55
    G (88)
        on left: 59 60 61 62
        on right: 48 58 59 60
    H (89)
        on left: 63 64 65 66
        on right: 46 48 54 58 63 64 66
    input (90)
        on left: 67 68 69 70 71 72 73 74
        on right: 10
    infunction (91)
        on left: 75
        on right: 67 68 72 73 74
    forloop (92)
        on left: 76
        on right: 24
    forpart (93)
        on left: 77 78
        on right: 76
    forstmt (94)
        on left: 79 80 81
        on right: 76
    a (95)
        on left: 82 83 84 85
        on right: 79 80
    b (96)
        on left: 86 87
        on right: 79 80
    var (97)
        on left: 88 89
        on right: 81 83 84 85 95 96 146
    arr (98)
        on left: 90
        on right: 89
    dims (99)
        on left: 91 92
        on right: 90 91
    dim (100)
        on left: 93 94
        on right: 91 92
    incdec (101)
        on left: 95 96
        on right: 16 79
    fundef (102)
        on left: 97 98
        on right: 1 3
    arglist (103)
        on left: 99 100
        on right: 97 98 99
    arg (104)
        on left: 101 102 103
        on right: 99 100
    funcall (105)
        on left: 104 105
        on right: 18
    argumentlist (106)
        on left: 106 107
        on right: 104 106
    ifstmt (107)
        on left: 108 109 110
        on right: 21 110
    then (108)
        on left: 111 112
        on right: 108 109 110
    switchstmt (109)
        on left: 113
        on right: 25
    cases (110)
        on left: 114 115
        on right: 113 115
    case (111)
        on left: 116
        on right: 115
    breakstmt (112)
        on left: 117
        on right: 19
    constmt (113)
        on left: 118
        on right: 20
    aexpr (114)
        on left: 119 120 121 122 123 124
        on right: 31 121 122 123 138
    op (115)
        on left: 125 126 127 128 129 130
        on right: 56 119 122
    bexpr (116)
        on left: 131 132 133 134
        on right: 32 87 133
    bexpr_ (117)
        on left: 135 136 137 138
        on right: 131 132 134 135 136
    logop (118)
        on left: 139 140
        on right: 132
    terstmt (119)
        on left: 141
        on right: 150
    elvisop (120)
        on left: 142
        on right: 34
    elvisassignmentop (121)
        on left: 143
        on right: 57
    terms (122)
        on left: 144 145 146 147 148 149 150
        on right: 33 43 56 57 64 65 83 84 85 106 107 116 119 120 124 137 141 142
    termination (123)
        on left: 151
        on right: 9 17 18 27 28 35 36 37 41 43 44 45 46 48 67 68 69 70 71 73 74 117 118


State 0

    0 $accept: . program $end

    ID        shift, and go to state 1
    IF        shift, and go to state 2
    FOR       shift, and go to state 3
    WHILE     shift, and go to state 4
    DO        shift, and go to state 5
    SWITCH    shift, and go to state 6
    RET       shift, and go to state 7
    BREAK     shift, and go to state 8
    IMPORT    shift, and go to state 9
    CONTINUE  shift, and go to state 10
    PRINTLN   shift, and go to state 11
    PRINT     shift, and go to state 12
    DEF       shift, and go to state 13
    CONST     shift, and go to state 14
    SYSTEM    shift, and go to state 15
    TERM      shift, and go to state 16
    '('       shift, and go to state 17
    DT        shift, and go to state 18

    program      go to state 19
    sstmts       go to state 20
    sstmt        go to state 21
    cstmt        go to state 22
    while        go to state 23
    dowhilestmt  go to state 24
    ret          go to state 25
    println      go to state 26
    print        go to state 27
    import       go to state 28
    const        go to state 29
    varDeclare   go to state 30
    mulDeclare   go to state 31
    varAssign    go to state 32
    mulAssign    go to state 33
    input        go to state 34
    infunction   go to state 35
    forloop      go to state 36
    var          go to state 37
    arr          go to state 38
    incdec       go to state 39
    fundef       go to state 40
    funcall      go to state 41
    ifstmt       go to state 42
    switchstmt   go to state 43
    breakstmt    go to state 44
    constmt      go to state 45
    termination  go to state 46


State 1

   53 varAssign: ID . EQ expr
   54          | ID . EQ '[' H ']'
   56          | ID . op EQ terms
   57          | ID . elvisassignmentop terms
   71 input: ID . EQ ID DOT READLINE '(' ')' termination
   73      | ID . EQ infunction termination
   74      | ID . EQ infunction AS DT termination
   88 var: ID .
   90 arr: ID . dims
  104 funcall: ID . '(' argumentlist ')'
  105        | ID . '(' ')'

    '('   shift, and go to state 47
    '['   shift, and go to state 48
    PLUS  shift, and go to state 49
    MIN   shift, and go to state 50
    MUL   shift, and go to state 51
    DIV   shift, and go to state 52
    POW   shift, and go to state 53
    EQ    shift, and go to state 54
    QUES  shift, and go to state 55
    MOD   shift, and go to state 56

    $default  reduce using rule 88 (var)

    dims               go to state 57
    dim                go to state 58
    op                 go to state 59
    elvisassignmentop  go to state 60


State 2

  108 ifstmt: IF . '(' expr ')' then
  109       | IF . '(' expr ')' then ELSE then
  110       | IF . '(' expr ')' then ELSE ifstmt

    '('  shift, and go to state 61


State 3

   76 forloop: FOR . '(' forstmt ')' forpart

    '('  shift, and go to state 62


State 4

   26 while: WHILE . '(' expr ')' '{' sstmts '}'

    '('  shift, and go to state 63


State 5

   27 dowhilestmt: DO . '{' sstmts '}' WHILE '(' expr ')' termination

    '{'  shift, and go to state 64


State 6

  113 switchstmt: SWITCH . '(' expr ')' '{' cases '}'

    '('  shift, and go to state 65


State 7

   28 ret: RET . comp termination

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    $default  reduce using rule 29 (comp)

    comp     go to state 74
    expr     go to state 75
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 8

  117 breakstmt: BREAK . termination

    TERM  shift, and go to state 16

    termination  go to state 83


State 9

   37 import: IMPORT . t termination
   38       | IMPORT . STATIC t

    ID      shift, and go to state 84
    STATIC  shift, and go to state 85

    t  go to state 86


State 10

  118 constmt: CONTINUE . termination

    TERM  shift, and go to state 16

    termination  go to state 87


State 11

   35 println: PRINTLN . expr termination

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 88
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 12

   36 print: PRINT . expr termination

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 89
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 13

   45 varDeclare: DEF . E termination
   46           | DEF . ID EQ '[' H ']' termination
   48 mulDeclare: DEF . '(' G ')' EQ '[' H ']' termination
   67 input: DEF . ID EQ infunction termination
   68      | DEF . ID EQ infunction AS DT termination
   69      | DEF . ID EQ SYSTEM DOT IN DOT CONSOLE '(' ')' DOT READLINE '(' ')' termination
   70      | DEF . ID EQ ID DOT READLINE '(' ')' termination
   98 fundef: DEF . ID '(' arglist ')' '{' sstmts '}'

    ID   shift, and go to state 90
    '('  shift, and go to state 91

    E  go to state 92


State 14

   43 const: CONST . ID EQ terms termination

    ID  shift, and go to state 93


State 15

   75 infunction: SYSTEM . DOT IN DOT NEWREADER '(' ')' DOT READLINE '(' ')'

    DOT  shift, and go to state 94


State 16

  151 termination: TERM .

    $default  reduce using rule 151 (termination)


State 17

   58 mulAssign: '(' . G ')' EQ '[' H ']'

    ID  shift, and go to state 95
    DT  shift, and go to state 96

    G  go to state 97


State 18

   44 varDeclare: DT . E termination
   97 fundef: DT . ID '(' arglist ')' '{' sstmts '}'

    ID  shift, and go to state 98

    E  go to state 99


State 19

    0 $accept: program . $end

    $end  shift, and go to state 100


State 20

    2 program: sstmts .

    $default  reduce using rule 2 (program)


State 21

    4 sstmts: sstmt . sstmts
    6       | sstmt .

    ID        shift, and go to state 1
    IF        shift, and go to state 2
    FOR       shift, and go to state 3
    WHILE     shift, and go to state 4
    DO        shift, and go to state 5
    SWITCH    shift, and go to state 6
    RET       shift, and go to state 7
    BREAK     shift, and go to state 8
    IMPORT    shift, and go to state 9
    CONTINUE  shift, and go to state 10
    PRINTLN   shift, and go to state 11
    PRINT     shift, and go to state 12
    DEF       shift, and go to state 101
    CONST     shift, and go to state 14
    SYSTEM    shift, and go to state 15
    TERM      shift, and go to state 16
    '('       shift, and go to state 17
    DT        shift, and go to state 102

    $default  reduce using rule 6 (sstmts)

    sstmts       go to state 103
    sstmt        go to state 21
    cstmt        go to state 22
    while        go to state 23
    dowhilestmt  go to state 24
    ret          go to state 25
    println      go to state 26
    print        go to state 27
    import       go to state 28
    const        go to state 29
    varDeclare   go to state 30
    mulDeclare   go to state 31
    varAssign    go to state 32
    mulAssign    go to state 33
    input        go to state 34
    infunction   go to state 35
    forloop      go to state 36
    var          go to state 37
    arr          go to state 38
    incdec       go to state 39
    funcall      go to state 41
    ifstmt       go to state 42
    switchstmt   go to state 43
    breakstmt    go to state 44
    constmt      go to state 45
    termination  go to state 46


State 22

    5 sstmts: cstmt . sstmts
    7       | cstmt .

    ID        shift, and go to state 1
    IF        shift, and go to state 2
    FOR       shift, and go to state 3
    WHILE     shift, and go to state 4
    DO        shift, and go to state 5
    SWITCH    shift, and go to state 6
    RET       shift, and go to state 7
    BREAK     shift, and go to state 8
    IMPORT    shift, and go to state 9
    CONTINUE  shift, and go to state 10
    PRINTLN   shift, and go to state 11
    PRINT     shift, and go to state 12
    DEF       shift, and go to state 101
    CONST     shift, and go to state 14
    SYSTEM    shift, and go to state 15
    TERM      shift, and go to state 16
    '('       shift, and go to state 17
    DT        shift, and go to state 102

    $default  reduce using rule 7 (sstmts)

    sstmts       go to state 104
    sstmt        go to state 21
    cstmt        go to state 22
    while        go to state 23
    dowhilestmt  go to state 24
    ret          go to state 25
    println      go to state 26
    print        go to state 27
    import       go to state 28
    const        go to state 29
    varDeclare   go to state 30
    mulDeclare   go to state 31
    varAssign    go to state 32
    mulAssign    go to state 33
    input        go to state 34
    infunction   go to state 35
    forloop      go to state 36
    var          go to state 37
    arr          go to state 38
    incdec       go to state 39
    funcall      go to state 41
    ifstmt       go to state 42
    switchstmt   go to state 43
    breakstmt    go to state 44
    constmt      go to state 45
    termination  go to state 46


State 23

   22 cstmt: while .

    $default  reduce using rule 22 (cstmt)


State 24

   23 cstmt: dowhilestmt .

    $default  reduce using rule 23 (cstmt)


State 25

   11 sstmt: ret .

    $default  reduce using rule 11 (sstmt)


State 26

   12 sstmt: println .

    $default  reduce using rule 12 (sstmt)


State 27

   13 sstmt: print .

    $default  reduce using rule 13 (sstmt)


State 28

   14 sstmt: import .

    $default  reduce using rule 14 (sstmt)


State 29

   15 sstmt: const .

    $default  reduce using rule 15 (sstmt)


State 30

    8 sstmt: varDeclare .

    $default  reduce using rule 8 (sstmt)


State 31

   47 varDeclare: mulDeclare .

    $default  reduce using rule 47 (varDeclare)


State 32

    9 sstmt: varAssign . termination

    TERM  shift, and go to state 16

    termination  go to state 105


State 33

   55 varAssign: mulAssign .

    $default  reduce using rule 55 (varAssign)


State 34

   10 sstmt: input .

    $default  reduce using rule 10 (sstmt)


State 35

   72 input: infunction .

    $default  reduce using rule 72 (input)


State 36

   24 cstmt: forloop .

    $default  reduce using rule 24 (cstmt)


State 37

   95 incdec: var . INC
   96       | var . DEC

    INC  shift, and go to state 106
    DEC  shift, and go to state 107


State 38

   89 var: arr .

    $default  reduce using rule 89 (var)


State 39

   16 sstmt: incdec .

    $default  reduce using rule 16 (sstmt)


State 40

    1 program: fundef .
    3        | fundef . sstmts

    ID        shift, and go to state 1
    IF        shift, and go to state 2
    FOR       shift, and go to state 3
    WHILE     shift, and go to state 4
    DO        shift, and go to state 5
    SWITCH    shift, and go to state 6
    RET       shift, and go to state 7
    BREAK     shift, and go to state 8
    IMPORT    shift, and go to state 9
    CONTINUE  shift, and go to state 10
    PRINTLN   shift, and go to state 11
    PRINT     shift, and go to state 12
    DEF       shift, and go to state 101
    CONST     shift, and go to state 14
    SYSTEM    shift, and go to state 15
    TERM      shift, and go to state 16
    '('       shift, and go to state 17
    DT        shift, and go to state 102

    $default  reduce using rule 1 (program)

    sstmts       go to state 108
    sstmt        go to state 21
    cstmt        go to state 22
    while        go to state 23
    dowhilestmt  go to state 24
    ret          go to state 25
    println      go to state 26
    print        go to state 27
    import       go to state 28
    const        go to state 29
    varDeclare   go to state 30
    mulDeclare   go to state 31
    varAssign    go to state 32
    mulAssign    go to state 33
    input        go to state 34
    infunction   go to state 35
    forloop      go to state 36
    var          go to state 37
    arr          go to state 38
    incdec       go to state 39
    funcall      go to state 41
    ifstmt       go to state 42
    switchstmt   go to state 43
    breakstmt    go to state 44
    constmt      go to state 45
    termination  go to state 46


State 41

   18 sstmt: funcall . termination

    TERM  shift, and go to state 16

    termination  go to state 109


State 42

   21 cstmt: ifstmt .

    $default  reduce using rule 21 (cstmt)


State 43

   25 cstmt: switchstmt .

    $default  reduce using rule 25 (cstmt)


State 44

   19 sstmt: breakstmt .

    $default  reduce using rule 19 (sstmt)


State 45

   20 sstmt: constmt .

    $default  reduce using rule 20 (sstmt)


State 46

   17 sstmt: termination .

    $default  reduce using rule 17 (sstmt)


State 47

  104 funcall: ID '(' . argumentlist ')'
  105        | ID '(' . ')'

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    ')'     shift, and go to state 110
    NOT     shift, and go to state 73

    expr          go to state 111
    var           go to state 76
    arr           go to state 38
    argumentlist  go to state 112
    aexpr         go to state 77
    bexpr         go to state 78
    bexpr_        go to state 79
    terstmt       go to state 80
    elvisop       go to state 81
    terms         go to state 113


State 48

   93 dim: '[' . ID ']'
   94    | '[' . INT ']'

    ID   shift, and go to state 114
    INT  shift, and go to state 115


State 49

  125 op: PLUS .

    $default  reduce using rule 125 (op)


State 50

  126 op: MIN .

    $default  reduce using rule 126 (op)


State 51

  128 op: MUL .

    $default  reduce using rule 128 (op)


State 52

  127 op: DIV .

    $default  reduce using rule 127 (op)


State 53

  130 op: POW .

    $default  reduce using rule 130 (op)


State 54

   53 varAssign: ID EQ . expr
   54          | ID EQ . '[' H ']'
   71 input: ID EQ . ID DOT READLINE '(' ')' termination
   73      | ID EQ . infunction termination
   74      | ID EQ . infunction AS DT termination

    ID      shift, and go to state 116
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    SYSTEM  shift, and go to state 15
    '('     shift, and go to state 72
    '['     shift, and go to state 117
    NOT     shift, and go to state 73

    expr        go to state 118
    infunction  go to state 119
    var         go to state 76
    arr         go to state 38
    aexpr       go to state 77
    bexpr       go to state 78
    bexpr_      go to state 79
    terstmt     go to state 80
    elvisop     go to state 81
    terms       go to state 82


State 55

  143 elvisassignmentop: QUES . EQ

    EQ  shift, and go to state 120


State 56

  129 op: MOD .

    $default  reduce using rule 129 (op)


State 57

   90 arr: ID dims .
   91 dims: dims . dim

    '['  shift, and go to state 48

    $default  reduce using rule 90 (arr)

    dim  go to state 121


State 58

   92 dims: dim .

    $default  reduce using rule 92 (dims)


State 59

   56 varAssign: ID op . EQ terms

    EQ  shift, and go to state 122


State 60

   57 varAssign: ID elvisassignmentop . terms

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 123


State 61

  108 ifstmt: IF '(' . expr ')' then
  109       | IF '(' . expr ')' then ELSE then
  110       | IF '(' . expr ')' then ELSE ifstmt

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 124
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 62

   76 forloop: FOR '(' . forstmt ')' forpart

    ID   shift, and go to state 66
    DEF  shift, and go to state 125
    DT   shift, and go to state 126

    $default  reduce using rule 82 (a)

    forstmt  go to state 127
    a        go to state 128
    var      go to state 129
    arr      go to state 38


State 63

   26 while: WHILE '(' . expr ')' '{' sstmts '}'

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 130
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 64

   27 dowhilestmt: DO '{' . sstmts '}' WHILE '(' expr ')' termination

    ID        shift, and go to state 1
    IF        shift, and go to state 2
    FOR       shift, and go to state 3
    WHILE     shift, and go to state 4
    DO        shift, and go to state 5
    SWITCH    shift, and go to state 6
    RET       shift, and go to state 7
    BREAK     shift, and go to state 8
    IMPORT    shift, and go to state 9
    CONTINUE  shift, and go to state 10
    PRINTLN   shift, and go to state 11
    PRINT     shift, and go to state 12
    DEF       shift, and go to state 101
    CONST     shift, and go to state 14
    SYSTEM    shift, and go to state 15
    TERM      shift, and go to state 16
    '('       shift, and go to state 17
    DT        shift, and go to state 102

    sstmts       go to state 131
    sstmt        go to state 21
    cstmt        go to state 22
    while        go to state 23
    dowhilestmt  go to state 24
    ret          go to state 25
    println      go to state 26
    print        go to state 27
    import       go to state 28
    const        go to state 29
    varDeclare   go to state 30
    mulDeclare   go to state 31
    varAssign    go to state 32
    mulAssign    go to state 33
    input        go to state 34
    infunction   go to state 35
    forloop      go to state 36
    var          go to state 37
    arr          go to state 38
    incdec       go to state 39
    funcall      go to state 41
    ifstmt       go to state 42
    switchstmt   go to state 43
    breakstmt    go to state 44
    constmt      go to state 45
    termination  go to state 46


State 65

  113 switchstmt: SWITCH '(' . expr ')' '{' cases '}'

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 132
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 66

   88 var: ID .
   90 arr: ID . dims

    '['  shift, and go to state 48

    $default  reduce using rule 88 (var)

    dims  go to state 57
    dim   go to state 58


State 67

  145 terms: REAL .

    $default  reduce using rule 145 (terms)


State 68

  144 terms: INT .

    $default  reduce using rule 144 (terms)


State 69

  149 terms: STRING .

    $default  reduce using rule 149 (terms)


State 70

  147 terms: TRUE .

    $default  reduce using rule 147 (terms)


State 71

  148 terms: FALSE .

    $default  reduce using rule 148 (terms)


State 72

  121 aexpr: '(' . aexpr ')'
  124      | '(' . terms ')'
  133 bexpr: '(' . bexpr ')'

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 133
    bexpr    go to state 134
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 135


State 73

  134 bexpr: NOT . bexpr_

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 136
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 74

   28 ret: RET comp . termination

    TERM  shift, and go to state 16

    termination  go to state 137


State 75

   30 comp: expr .
  141 terstmt: expr . QUES terms COLON terms
  142 elvisop: expr . QUES COLON terms

    QUES  shift, and go to state 138

    $default  reduce using rule 30 (comp)


State 76

  146 terms: var .

    $default  reduce using rule 146 (terms)


State 77

   31 expr: aexpr .
  122 aexpr: aexpr . op aexpr
  123      | aexpr . BITOP aexpr
  138 bexpr_: aexpr .

    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 139
    MOD    shift, and go to state 56

    TERM      reduce using rule 31 (expr)
    TERM      [reduce using rule 138 (bexpr_)]
    ')'       reduce using rule 31 (expr)
    ')'       [reduce using rule 138 (bexpr_)]
    COMMA     reduce using rule 31 (expr)
    COMMA     [reduce using rule 138 (bexpr_)]
    RELOP     reduce using rule 138 (bexpr_)
    LOGOP     reduce using rule 138 (bexpr_)
    QUES      reduce using rule 31 (expr)
    QUES      [reduce using rule 138 (bexpr_)]
    AND       reduce using rule 138 (bexpr_)
    OR        reduce using rule 138 (bexpr_)
    $default  reduce using rule 31 (expr)

    op  go to state 140


State 78

   32 expr: bexpr .

    $default  reduce using rule 32 (expr)


State 79

  131 bexpr: bexpr_ . RELOP bexpr_
  132      | bexpr_ . logop bexpr_
  135 bexpr_: bexpr_ . RELOP bexpr_
  136       | bexpr_ . LOGOP bexpr_

    RELOP  shift, and go to state 141
    LOGOP  shift, and go to state 142
    AND    shift, and go to state 143
    OR     shift, and go to state 144

    logop  go to state 145


State 80

  150 terms: terstmt .

    $default  reduce using rule 150 (terms)


State 81

   34 expr: elvisop .

    $default  reduce using rule 34 (expr)


State 82

   33 expr: terms .
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  137 bexpr_: terms .

    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    TERM      reduce using rule 33 (expr)
    TERM      [reduce using rule 137 (bexpr_)]
    ')'       reduce using rule 33 (expr)
    ')'       [reduce using rule 137 (bexpr_)]
    COMMA     reduce using rule 33 (expr)
    COMMA     [reduce using rule 137 (bexpr_)]
    RELOP     reduce using rule 137 (bexpr_)
    LOGOP     reduce using rule 137 (bexpr_)
    QUES      reduce using rule 33 (expr)
    QUES      [reduce using rule 137 (bexpr_)]
    AND       reduce using rule 137 (bexpr_)
    OR        reduce using rule 137 (bexpr_)
    $default  reduce using rule 33 (expr)

    op  go to state 147


State 83

  117 breakstmt: BREAK termination .

    $default  reduce using rule 117 (breakstmt)


State 84

   39 t: ID . DOT t
   40  | ID . DOT MUL
   41  | ID . termination
   42  | ID . AS ID

    TERM  shift, and go to state 16
    DOT   shift, and go to state 148
    AS    shift, and go to state 149

    termination  go to state 150


State 85

   38 import: IMPORT STATIC . t

    ID  shift, and go to state 84

    t  go to state 151


State 86

   37 import: IMPORT t . termination

    TERM  shift, and go to state 16

    termination  go to state 152


State 87

  118 constmt: CONTINUE termination .

    $default  reduce using rule 118 (constmt)


State 88

   35 println: PRINTLN expr . termination
  141 terstmt: expr . QUES terms COLON terms
  142 elvisop: expr . QUES COLON terms

    TERM  shift, and go to state 16
    QUES  shift, and go to state 138

    termination  go to state 153


State 89

   36 print: PRINT expr . termination
  141 terstmt: expr . QUES terms COLON terms
  142 elvisop: expr . QUES COLON terms

    TERM  shift, and go to state 16
    QUES  shift, and go to state 138

    termination  go to state 154


State 90

   46 varDeclare: DEF ID . EQ '[' H ']' termination
   49 E: ID . COMMA E
   50  | ID . EQ expr COMMA E
   51  | ID .
   52  | ID . EQ expr
   67 input: DEF ID . EQ infunction termination
   68      | DEF ID . EQ infunction AS DT termination
   69      | DEF ID . EQ SYSTEM DOT IN DOT CONSOLE '(' ')' DOT READLINE '(' ')' termination
   70      | DEF ID . EQ ID DOT READLINE '(' ')' termination
   98 fundef: DEF ID . '(' arglist ')' '{' sstmts '}'

    '('    shift, and go to state 155
    COMMA  shift, and go to state 156
    EQ     shift, and go to state 157

    $default  reduce using rule 51 (E)


State 91

   48 mulDeclare: DEF '(' . G ')' EQ '[' H ']' termination

    ID  shift, and go to state 95
    DT  shift, and go to state 96

    G  go to state 158


State 92

   45 varDeclare: DEF E . termination

    TERM  shift, and go to state 16

    termination  go to state 159


State 93

   43 const: CONST ID . EQ terms termination

    EQ  shift, and go to state 160


State 94

   75 infunction: SYSTEM DOT . IN DOT NEWREADER '(' ')' DOT READLINE '(' ')'

    IN  shift, and go to state 161


State 95

   59 G: ID . COMMA G
   62  | ID .

    COMMA  shift, and go to state 162

    $default  reduce using rule 62 (G)


State 96

   60 G: DT . ID COMMA G
   61  | DT . ID

    ID  shift, and go to state 163


State 97

   58 mulAssign: '(' G . ')' EQ '[' H ']'

    ')'  shift, and go to state 164


State 98

   49 E: ID . COMMA E
   50  | ID . EQ expr COMMA E
   51  | ID .
   52  | ID . EQ expr
   97 fundef: DT ID . '(' arglist ')' '{' sstmts '}'

    '('    shift, and go to state 165
    COMMA  shift, and go to state 156
    EQ     shift, and go to state 166

    $default  reduce using rule 51 (E)


State 99

   44 varDeclare: DT E . termination

    TERM  shift, and go to state 16

    termination  go to state 167


State 100

    0 $accept: program $end .

    $default  accept


State 101

   45 varDeclare: DEF . E termination
   46           | DEF . ID EQ '[' H ']' termination
   48 mulDeclare: DEF . '(' G ')' EQ '[' H ']' termination
   67 input: DEF . ID EQ infunction termination
   68      | DEF . ID EQ infunction AS DT termination
   69      | DEF . ID EQ SYSTEM DOT IN DOT CONSOLE '(' ')' DOT READLINE '(' ')' termination
   70      | DEF . ID EQ ID DOT READLINE '(' ')' termination

    ID   shift, and go to state 168
    '('  shift, and go to state 91

    E  go to state 92


State 102

   44 varDeclare: DT . E termination

    ID  shift, and go to state 169

    E  go to state 99


State 103

    4 sstmts: sstmt sstmts .

    $default  reduce using rule 4 (sstmts)


State 104

    5 sstmts: cstmt sstmts .

    $default  reduce using rule 5 (sstmts)


State 105

    9 sstmt: varAssign termination .

    $default  reduce using rule 9 (sstmt)


State 106

   95 incdec: var INC .

    $default  reduce using rule 95 (incdec)


State 107

   96 incdec: var DEC .

    $default  reduce using rule 96 (incdec)


State 108

    3 program: fundef sstmts .

    $default  reduce using rule 3 (program)


State 109

   18 sstmt: funcall termination .

    $default  reduce using rule 18 (sstmt)


State 110

  105 funcall: ID '(' ')' .

    $default  reduce using rule 105 (funcall)


State 111

  141 terstmt: expr . QUES terms COLON terms
  142 elvisop: expr . QUES COLON terms

    QUES  shift, and go to state 138


State 112

  104 funcall: ID '(' argumentlist . ')'
  106 argumentlist: argumentlist . COMMA terms

    ')'    shift, and go to state 170
    COMMA  shift, and go to state 171


State 113

   33 expr: terms .
  107 argumentlist: terms .
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  137 bexpr_: terms .

    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    ')'       reduce using rule 107 (argumentlist)
    COMMA     reduce using rule 107 (argumentlist)
    QUES      reduce using rule 33 (expr)
    $default  reduce using rule 137 (bexpr_)

    op  go to state 147


State 114

   93 dim: '[' ID . ']'

    ']'  shift, and go to state 172


State 115

   94 dim: '[' INT . ']'

    ']'  shift, and go to state 173


State 116

   71 input: ID EQ ID . DOT READLINE '(' ')' termination
   88 var: ID .
   90 arr: ID . dims

    DOT  shift, and go to state 174
    '['  shift, and go to state 48

    $default  reduce using rule 88 (var)

    dims  go to state 57
    dim   go to state 58


State 117

   54 varAssign: ID EQ '[' . H ']'

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    '['     shift, and go to state 175
    NOT     shift, and go to state 73

    expr     go to state 111
    H        go to state 176
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 177


State 118

   53 varAssign: ID EQ expr .
  141 terstmt: expr . QUES terms COLON terms
  142 elvisop: expr . QUES COLON terms

    QUES  shift, and go to state 138

    $default  reduce using rule 53 (varAssign)


State 119

   73 input: ID EQ infunction . termination
   74      | ID EQ infunction . AS DT termination

    TERM  shift, and go to state 16
    AS    shift, and go to state 178

    termination  go to state 179


State 120

  143 elvisassignmentop: QUES EQ .

    $default  reduce using rule 143 (elvisassignmentop)


State 121

   91 dims: dims dim .

    $default  reduce using rule 91 (dims)


State 122

   56 varAssign: ID op EQ . terms

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 180


State 123

   33 expr: terms .
   57 varAssign: ID elvisassignmentop terms .
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  137 bexpr_: terms .

    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    TERM      reduce using rule 57 (varAssign)
    ')'       reduce using rule 57 (varAssign)
    QUES      reduce using rule 33 (expr)
    $default  reduce using rule 137 (bexpr_)

    op  go to state 147


State 124

  108 ifstmt: IF '(' expr . ')' then
  109       | IF '(' expr . ')' then ELSE then
  110       | IF '(' expr . ')' then ELSE ifstmt
  141 terstmt: expr . QUES terms COLON terms
  142 elvisop: expr . QUES COLON terms

    ')'   shift, and go to state 181
    QUES  shift, and go to state 138


State 125

   85 a: DEF . var EQ terms

    ID  shift, and go to state 66

    var  go to state 182
    arr  go to state 38


State 126

   84 a: DT . var EQ terms

    ID  shift, and go to state 66

    var  go to state 183
    arr  go to state 38


State 127

   76 forloop: FOR '(' forstmt . ')' forpart

    ')'  shift, and go to state 184


State 128

   79 forstmt: a . TERM b TERM incdec
   80        | a . TERM b TERM varAssign

    TERM  shift, and go to state 185


State 129

   81 forstmt: var . IN var
   83 a: var . EQ terms

    IN  shift, and go to state 186
    EQ  shift, and go to state 187


State 130

   26 while: WHILE '(' expr . ')' '{' sstmts '}'
  141 terstmt: expr . QUES terms COLON terms
  142 elvisop: expr . QUES COLON terms

    ')'   shift, and go to state 188
    QUES  shift, and go to state 138


State 131

   27 dowhilestmt: DO '{' sstmts . '}' WHILE '(' expr ')' termination

    '}'  shift, and go to state 189


State 132

  113 switchstmt: SWITCH '(' expr . ')' '{' cases '}'
  141 terstmt: expr . QUES terms COLON terms
  142 elvisop: expr . QUES COLON terms

    ')'   shift, and go to state 190
    QUES  shift, and go to state 138


State 133

   31 expr: aexpr .
  121 aexpr: '(' aexpr . ')'
  122      | aexpr . op aexpr
  123      | aexpr . BITOP aexpr
  138 bexpr_: aexpr .

    ')'    shift, and go to state 191
    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 139
    MOD    shift, and go to state 56

    QUES      reduce using rule 31 (expr)
    $default  reduce using rule 138 (bexpr_)

    op  go to state 140


State 134

   32 expr: bexpr .
  133 bexpr: '(' bexpr . ')'

    ')'  shift, and go to state 192

    $default  reduce using rule 32 (expr)


State 135

   33 expr: terms .
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  124      | '(' terms . ')'
  137 bexpr_: terms .

    ')'    shift, and go to state 193
    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    QUES      reduce using rule 33 (expr)
    $default  reduce using rule 137 (bexpr_)

    op  go to state 147


State 136

  131 bexpr: bexpr_ . RELOP bexpr_
  132      | bexpr_ . logop bexpr_
  134      | NOT bexpr_ .
  135 bexpr_: bexpr_ . RELOP bexpr_
  136       | bexpr_ . LOGOP bexpr_

    RELOP  shift, and go to state 141
    LOGOP  shift, and go to state 142
    AND    shift, and go to state 143
    OR     shift, and go to state 144

    $default  reduce using rule 134 (bexpr)

    logop  go to state 145


State 137

   28 ret: RET comp termination .

    $default  reduce using rule 28 (ret)


State 138

  141 terstmt: expr QUES . terms COLON terms
  142 elvisop: expr QUES . COLON terms

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    COLON   shift, and go to state 194
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 195


State 139

  123 aexpr: aexpr BITOP . aexpr

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 196
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 140

  122 aexpr: aexpr op . aexpr

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 197
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 141

  131 bexpr: bexpr_ RELOP . bexpr_
  135 bexpr_: bexpr_ RELOP . bexpr_

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 198
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 142

  136 bexpr_: bexpr_ LOGOP . bexpr_

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 199
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 143

  139 logop: AND .

    $default  reduce using rule 139 (logop)


State 144

  140 logop: OR .

    $default  reduce using rule 140 (logop)


State 145

  132 bexpr: bexpr_ logop . bexpr_

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 200
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 146

  120 aexpr: terms BITOP . terms

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 201


State 147

  119 aexpr: terms op . terms

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 202


State 148

   39 t: ID DOT . t
   40  | ID DOT . MUL

    ID   shift, and go to state 84
    MUL  shift, and go to state 203

    t  go to state 204


State 149

   42 t: ID AS . ID

    ID  shift, and go to state 205


State 150

   41 t: ID termination .

    $default  reduce using rule 41 (t)


State 151

   38 import: IMPORT STATIC t .

    $default  reduce using rule 38 (import)


State 152

   37 import: IMPORT t termination .

    $default  reduce using rule 37 (import)


State 153

   35 println: PRINTLN expr termination .

    $default  reduce using rule 35 (println)


State 154

   36 print: PRINT expr termination .

    $default  reduce using rule 36 (print)


State 155

   98 fundef: DEF ID '(' . arglist ')' '{' sstmts '}'

    DT  shift, and go to state 206

    $default  reduce using rule 101 (arg)

    arglist  go to state 207
    arg      go to state 208


State 156

   49 E: ID COMMA . E

    ID  shift, and go to state 169

    E  go to state 209


State 157

   46 varDeclare: DEF ID EQ . '[' H ']' termination
   50 E: ID EQ . expr COMMA E
   52  | ID EQ . expr
   67 input: DEF ID EQ . infunction termination
   68      | DEF ID EQ . infunction AS DT termination
   69      | DEF ID EQ . SYSTEM DOT IN DOT CONSOLE '(' ')' DOT READLINE '(' ')' termination
   70      | DEF ID EQ . ID DOT READLINE '(' ')' termination

    ID      shift, and go to state 210
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    SYSTEM  shift, and go to state 211
    '('     shift, and go to state 72
    '['     shift, and go to state 212
    NOT     shift, and go to state 73

    expr        go to state 213
    infunction  go to state 214
    var         go to state 76
    arr         go to state 38
    aexpr       go to state 77
    bexpr       go to state 78
    bexpr_      go to state 79
    terstmt     go to state 80
    elvisop     go to state 81
    terms       go to state 82


State 158

   48 mulDeclare: DEF '(' G . ')' EQ '[' H ']' termination

    ')'  shift, and go to state 215


State 159

   45 varDeclare: DEF E termination .

    $default  reduce using rule 45 (varDeclare)


State 160

   43 const: CONST ID EQ . terms termination

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 216


State 161

   75 infunction: SYSTEM DOT IN . DOT NEWREADER '(' ')' DOT READLINE '(' ')'

    DOT  shift, and go to state 217


State 162

   59 G: ID COMMA . G

    ID  shift, and go to state 95
    DT  shift, and go to state 96

    G  go to state 218


State 163

   60 G: DT ID . COMMA G
   61  | DT ID .

    COMMA  shift, and go to state 219

    $default  reduce using rule 61 (G)


State 164

   58 mulAssign: '(' G ')' . EQ '[' H ']'

    EQ  shift, and go to state 220


State 165

   97 fundef: DT ID '(' . arglist ')' '{' sstmts '}'

    DT  shift, and go to state 206

    $default  reduce using rule 101 (arg)

    arglist  go to state 221
    arg      go to state 208


State 166

   50 E: ID EQ . expr COMMA E
   52  | ID EQ . expr

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 213
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 167

   44 varDeclare: DT E termination .

    $default  reduce using rule 44 (varDeclare)


State 168

   46 varDeclare: DEF ID . EQ '[' H ']' termination
   49 E: ID . COMMA E
   50  | ID . EQ expr COMMA E
   51  | ID .
   52  | ID . EQ expr
   67 input: DEF ID . EQ infunction termination
   68      | DEF ID . EQ infunction AS DT termination
   69      | DEF ID . EQ SYSTEM DOT IN DOT CONSOLE '(' ')' DOT READLINE '(' ')' termination
   70      | DEF ID . EQ ID DOT READLINE '(' ')' termination

    COMMA  shift, and go to state 156
    EQ     shift, and go to state 157

    $default  reduce using rule 51 (E)


State 169

   49 E: ID . COMMA E
   50  | ID . EQ expr COMMA E
   51  | ID .
   52  | ID . EQ expr

    COMMA  shift, and go to state 156
    EQ     shift, and go to state 166

    $default  reduce using rule 51 (E)


State 170

  104 funcall: ID '(' argumentlist ')' .

    $default  reduce using rule 104 (funcall)


State 171

  106 argumentlist: argumentlist COMMA . terms

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 222


State 172

   93 dim: '[' ID ']' .

    $default  reduce using rule 93 (dim)


State 173

   94 dim: '[' INT ']' .

    $default  reduce using rule 94 (dim)


State 174

   71 input: ID EQ ID DOT . READLINE '(' ')' termination

    READLINE  shift, and go to state 223


State 175

   63 H: '[' . H ']' COMMA H
   66  | '[' . H ']'

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    '['     shift, and go to state 175
    NOT     shift, and go to state 73

    expr     go to state 111
    H        go to state 224
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 177


State 176

   54 varAssign: ID EQ '[' H . ']'

    ']'  shift, and go to state 225


State 177

   33 expr: terms .
   64 H: terms . COMMA H
   65  | terms .
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  137 bexpr_: terms .

    COMMA  shift, and go to state 226
    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    ']'       reduce using rule 65 (H)
    QUES      reduce using rule 33 (expr)
    $default  reduce using rule 137 (bexpr_)

    op  go to state 147


State 178

   74 input: ID EQ infunction AS . DT termination

    DT  shift, and go to state 227


State 179

   73 input: ID EQ infunction termination .

    $default  reduce using rule 73 (input)


State 180

   33 expr: terms .
   56 varAssign: ID op EQ terms .
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  137 bexpr_: terms .

    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    TERM      reduce using rule 56 (varAssign)
    ')'       reduce using rule 56 (varAssign)
    QUES      reduce using rule 33 (expr)
    $default  reduce using rule 137 (bexpr_)

    op  go to state 147


State 181

  108 ifstmt: IF '(' expr ')' . then
  109       | IF '(' expr ')' . then ELSE then
  110       | IF '(' expr ')' . then ELSE ifstmt

    ID        shift, and go to state 1
    RET       shift, and go to state 7
    BREAK     shift, and go to state 8
    IMPORT    shift, and go to state 9
    CONTINUE  shift, and go to state 10
    PRINTLN   shift, and go to state 11
    PRINT     shift, and go to state 12
    DEF       shift, and go to state 101
    CONST     shift, and go to state 14
    SYSTEM    shift, and go to state 15
    TERM      shift, and go to state 16
    '{'       shift, and go to state 228
    '('       shift, and go to state 17
    DT        shift, and go to state 102

    sstmt        go to state 229
    ret          go to state 25
    println      go to state 26
    print        go to state 27
    import       go to state 28
    const        go to state 29
    varDeclare   go to state 30
    mulDeclare   go to state 31
    varAssign    go to state 32
    mulAssign    go to state 33
    input        go to state 34
    infunction   go to state 35
    var          go to state 37
    arr          go to state 38
    incdec       go to state 39
    funcall      go to state 41
    then         go to state 230
    breakstmt    go to state 44
    constmt      go to state 45
    termination  go to state 46


State 182

   85 a: DEF var . EQ terms

    EQ  shift, and go to state 231


State 183

   84 a: DT var . EQ terms

    EQ  shift, and go to state 232


State 184

   76 forloop: FOR '(' forstmt ')' . forpart

    ID        shift, and go to state 1
    RET       shift, and go to state 7
    BREAK     shift, and go to state 8
    IMPORT    shift, and go to state 9
    CONTINUE  shift, and go to state 10
    PRINTLN   shift, and go to state 11
    PRINT     shift, and go to state 12
    DEF       shift, and go to state 101
    CONST     shift, and go to state 14
    SYSTEM    shift, and go to state 15
    TERM      shift, and go to state 16
    '{'       shift, and go to state 233
    '('       shift, and go to state 17
    DT        shift, and go to state 102

    sstmt        go to state 234
    ret          go to state 25
    println      go to state 26
    print        go to state 27
    import       go to state 28
    const        go to state 29
    varDeclare   go to state 30
    mulDeclare   go to state 31
    varAssign    go to state 32
    mulAssign    go to state 33
    input        go to state 34
    infunction   go to state 35
    forpart      go to state 235
    var          go to state 37
    arr          go to state 38
    incdec       go to state 39
    funcall      go to state 41
    breakstmt    go to state 44
    constmt      go to state 45
    termination  go to state 46


State 185

   79 forstmt: a TERM . b TERM incdec
   80        | a TERM . b TERM varAssign

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    $default  reduce using rule 86 (b)

    expr     go to state 111
    b        go to state 236
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 237
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 186

   81 forstmt: var IN . var

    ID  shift, and go to state 66

    var  go to state 238
    arr  go to state 38


State 187

   83 a: var EQ . terms

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 239


State 188

   26 while: WHILE '(' expr ')' . '{' sstmts '}'

    '{'  shift, and go to state 240


State 189

   27 dowhilestmt: DO '{' sstmts '}' . WHILE '(' expr ')' termination

    WHILE  shift, and go to state 241


State 190

  113 switchstmt: SWITCH '(' expr ')' . '{' cases '}'

    '{'  shift, and go to state 242


State 191

  121 aexpr: '(' aexpr ')' .

    $default  reduce using rule 121 (aexpr)


State 192

  133 bexpr: '(' bexpr ')' .

    $default  reduce using rule 133 (bexpr)


State 193

  124 aexpr: '(' terms ')' .

    $default  reduce using rule 124 (aexpr)


State 194

  142 elvisop: expr QUES COLON . terms

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 243


State 195

   33 expr: terms .
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  137 bexpr_: terms .
  141 terstmt: expr QUES terms . COLON terms

    COLON  shift, and go to state 244
    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    QUES      reduce using rule 33 (expr)
    $default  reduce using rule 137 (bexpr_)

    op  go to state 147


State 196

   31 expr: aexpr .
  122 aexpr: aexpr . op aexpr
  123      | aexpr . BITOP aexpr
  123      | aexpr BITOP aexpr .
  138 bexpr_: aexpr .

    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 139
    MOD    shift, and go to state 56

    RELOP     reduce using rule 123 (aexpr)
    RELOP     [reduce using rule 138 (bexpr_)]
    LOGOP     reduce using rule 123 (aexpr)
    LOGOP     [reduce using rule 138 (bexpr_)]
    QUES      reduce using rule 31 (expr)
    QUES      [reduce using rule 123 (aexpr)]
    AND       reduce using rule 123 (aexpr)
    AND       [reduce using rule 138 (bexpr_)]
    OR        reduce using rule 123 (aexpr)
    OR        [reduce using rule 138 (bexpr_)]
    $default  reduce using rule 123 (aexpr)

    op  go to state 140


State 197

   31 expr: aexpr .
  122 aexpr: aexpr . op aexpr
  122      | aexpr op aexpr .
  123      | aexpr . BITOP aexpr
  138 bexpr_: aexpr .

    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 139
    MOD    shift, and go to state 56

    RELOP     reduce using rule 122 (aexpr)
    RELOP     [reduce using rule 138 (bexpr_)]
    LOGOP     reduce using rule 122 (aexpr)
    LOGOP     [reduce using rule 138 (bexpr_)]
    QUES      reduce using rule 31 (expr)
    QUES      [reduce using rule 122 (aexpr)]
    AND       reduce using rule 122 (aexpr)
    AND       [reduce using rule 138 (bexpr_)]
    OR        reduce using rule 122 (aexpr)
    OR        [reduce using rule 138 (bexpr_)]
    $default  reduce using rule 122 (aexpr)

    op  go to state 140


State 198

  131 bexpr: bexpr_ . RELOP bexpr_
  131      | bexpr_ RELOP bexpr_ .
  132      | bexpr_ . logop bexpr_
  135 bexpr_: bexpr_ . RELOP bexpr_
  135       | bexpr_ RELOP bexpr_ .
  136       | bexpr_ . LOGOP bexpr_

    RELOP  shift, and go to state 141
    LOGOP  shift, and go to state 142
    AND    shift, and go to state 143
    OR     shift, and go to state 144

    TERM      reduce using rule 131 (bexpr)
    TERM      [reduce using rule 135 (bexpr_)]
    ')'       reduce using rule 131 (bexpr)
    ')'       [reduce using rule 135 (bexpr_)]
    COMMA     reduce using rule 131 (bexpr)
    COMMA     [reduce using rule 135 (bexpr_)]
    QUES      reduce using rule 131 (bexpr)
    QUES      [reduce using rule 135 (bexpr_)]
    AND       [reduce using rule 135 (bexpr_)]
    OR        [reduce using rule 135 (bexpr_)]
    $default  reduce using rule 131 (bexpr)

    logop  go to state 145


State 199

  131 bexpr: bexpr_ . RELOP bexpr_
  132      | bexpr_ . logop bexpr_
  135 bexpr_: bexpr_ . RELOP bexpr_
  136       | bexpr_ . LOGOP bexpr_
  136       | bexpr_ LOGOP bexpr_ .

    AND  shift, and go to state 143
    OR   shift, and go to state 144

    AND       [reduce using rule 136 (bexpr_)]
    OR        [reduce using rule 136 (bexpr_)]
    $default  reduce using rule 136 (bexpr_)

    logop  go to state 145


State 200

  131 bexpr: bexpr_ . RELOP bexpr_
  132      | bexpr_ . logop bexpr_
  132      | bexpr_ logop bexpr_ .
  135 bexpr_: bexpr_ . RELOP bexpr_
  136       | bexpr_ . LOGOP bexpr_

    RELOP  shift, and go to state 141
    LOGOP  shift, and go to state 142
    AND    shift, and go to state 143
    OR     shift, and go to state 144

    $default  reduce using rule 132 (bexpr)

    logop  go to state 145


State 201

   33 expr: terms .
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  120      | terms BITOP terms .
  137 bexpr_: terms .

    MOD  shift, and go to state 56

    RELOP     reduce using rule 120 (aexpr)
    RELOP     [reduce using rule 137 (bexpr_)]
    LOGOP     reduce using rule 120 (aexpr)
    LOGOP     [reduce using rule 137 (bexpr_)]
    QUES      reduce using rule 33 (expr)
    QUES      [reduce using rule 120 (aexpr)]
    AND       reduce using rule 120 (aexpr)
    AND       [reduce using rule 137 (bexpr_)]
    OR        reduce using rule 120 (aexpr)
    OR        [reduce using rule 137 (bexpr_)]
    $default  reduce using rule 120 (aexpr)

    op  go to state 147


State 202

   33 expr: terms .
  119 aexpr: terms . op terms
  119      | terms op terms .
  120      | terms . BITOP terms
  137 bexpr_: terms .

    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    PLUS      [reduce using rule 119 (aexpr)]
    MIN       [reduce using rule 119 (aexpr)]
    MUL       [reduce using rule 119 (aexpr)]
    DIV       [reduce using rule 119 (aexpr)]
    POW       [reduce using rule 119 (aexpr)]
    RELOP     reduce using rule 119 (aexpr)
    RELOP     [reduce using rule 137 (bexpr_)]
    LOGOP     reduce using rule 119 (aexpr)
    LOGOP     [reduce using rule 137 (bexpr_)]
    BITOP     [reduce using rule 119 (aexpr)]
    QUES      reduce using rule 33 (expr)
    QUES      [reduce using rule 119 (aexpr)]
    MOD       [reduce using rule 119 (aexpr)]
    AND       reduce using rule 119 (aexpr)
    AND       [reduce using rule 137 (bexpr_)]
    OR        reduce using rule 119 (aexpr)
    OR        [reduce using rule 137 (bexpr_)]
    $default  reduce using rule 119 (aexpr)

    op  go to state 147


State 203

   40 t: ID DOT MUL .

    $default  reduce using rule 40 (t)


State 204

   39 t: ID DOT t .

    $default  reduce using rule 39 (t)


State 205

   42 t: ID AS ID .

    $default  reduce using rule 42 (t)


State 206

  102 arg: DT . ID
  103    | DT . ID EQ expr

    ID  shift, and go to state 245


State 207

   98 fundef: DEF ID '(' arglist . ')' '{' sstmts '}'
   99 arglist: arglist . COMMA arg

    ')'    shift, and go to state 246
    COMMA  shift, and go to state 247


State 208

  100 arglist: arg .

    $default  reduce using rule 100 (arglist)


State 209

   49 E: ID COMMA E .

    $default  reduce using rule 49 (E)


State 210

   70 input: DEF ID EQ ID . DOT READLINE '(' ')' termination
   88 var: ID .
   90 arr: ID . dims

    DOT  shift, and go to state 248
    '['  shift, and go to state 48

    $default  reduce using rule 88 (var)

    dims  go to state 57
    dim   go to state 58


State 211

   69 input: DEF ID EQ SYSTEM . DOT IN DOT CONSOLE '(' ')' DOT READLINE '(' ')' termination
   75 infunction: SYSTEM . DOT IN DOT NEWREADER '(' ')' DOT READLINE '(' ')'

    DOT  shift, and go to state 249


State 212

   46 varDeclare: DEF ID EQ '[' . H ']' termination

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    '['     shift, and go to state 175
    NOT     shift, and go to state 73

    expr     go to state 111
    H        go to state 250
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 177


State 213

   50 E: ID EQ expr . COMMA E
   52  | ID EQ expr .
  141 terstmt: expr . QUES terms COLON terms
  142 elvisop: expr . QUES COLON terms

    COMMA  shift, and go to state 251
    QUES   shift, and go to state 138

    $default  reduce using rule 52 (E)


State 214

   67 input: DEF ID EQ infunction . termination
   68      | DEF ID EQ infunction . AS DT termination

    TERM  shift, and go to state 16
    AS    shift, and go to state 252

    termination  go to state 253


State 215

   48 mulDeclare: DEF '(' G ')' . EQ '[' H ']' termination

    EQ  shift, and go to state 254


State 216

   33 expr: terms .
   43 const: CONST ID EQ terms . termination
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  137 bexpr_: terms .

    TERM   shift, and go to state 16
    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    QUES      reduce using rule 33 (expr)
    $default  reduce using rule 137 (bexpr_)

    op           go to state 147
    termination  go to state 255


State 217

   75 infunction: SYSTEM DOT IN DOT . NEWREADER '(' ')' DOT READLINE '(' ')'

    NEWREADER  shift, and go to state 256


State 218

   59 G: ID COMMA G .

    $default  reduce using rule 59 (G)


State 219

   60 G: DT ID COMMA . G

    ID  shift, and go to state 95
    DT  shift, and go to state 96

    G  go to state 257


State 220

   58 mulAssign: '(' G ')' EQ . '[' H ']'

    '['  shift, and go to state 258


State 221

   97 fundef: DT ID '(' arglist . ')' '{' sstmts '}'
   99 arglist: arglist . COMMA arg

    ')'    shift, and go to state 259
    COMMA  shift, and go to state 247


State 222

   33 expr: terms .
  106 argumentlist: argumentlist COMMA terms .
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  137 bexpr_: terms .

    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    ')'       reduce using rule 106 (argumentlist)
    COMMA     reduce using rule 106 (argumentlist)
    QUES      reduce using rule 33 (expr)
    $default  reduce using rule 137 (bexpr_)

    op  go to state 147


State 223

   71 input: ID EQ ID DOT READLINE . '(' ')' termination

    '('  shift, and go to state 260


State 224

   63 H: '[' H . ']' COMMA H
   66  | '[' H . ']'

    ']'  shift, and go to state 261


State 225

   54 varAssign: ID EQ '[' H ']' .

    $default  reduce using rule 54 (varAssign)


State 226

   64 H: terms COMMA . H

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    '['     shift, and go to state 175
    NOT     shift, and go to state 73

    expr     go to state 111
    H        go to state 262
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 177


State 227

   74 input: ID EQ infunction AS DT . termination

    TERM  shift, and go to state 16

    termination  go to state 263


State 228

  111 then: '{' . sstmts '}'

    ID        shift, and go to state 1
    IF        shift, and go to state 2
    FOR       shift, and go to state 3
    WHILE     shift, and go to state 4
    DO        shift, and go to state 5
    SWITCH    shift, and go to state 6
    RET       shift, and go to state 7
    BREAK     shift, and go to state 8
    IMPORT    shift, and go to state 9
    CONTINUE  shift, and go to state 10
    PRINTLN   shift, and go to state 11
    PRINT     shift, and go to state 12
    DEF       shift, and go to state 101
    CONST     shift, and go to state 14
    SYSTEM    shift, and go to state 15
    TERM      shift, and go to state 16
    '('       shift, and go to state 17
    DT        shift, and go to state 102

    sstmts       go to state 264
    sstmt        go to state 21
    cstmt        go to state 22
    while        go to state 23
    dowhilestmt  go to state 24
    ret          go to state 25
    println      go to state 26
    print        go to state 27
    import       go to state 28
    const        go to state 29
    varDeclare   go to state 30
    mulDeclare   go to state 31
    varAssign    go to state 32
    mulAssign    go to state 33
    input        go to state 34
    infunction   go to state 35
    forloop      go to state 36
    var          go to state 37
    arr          go to state 38
    incdec       go to state 39
    funcall      go to state 41
    ifstmt       go to state 42
    switchstmt   go to state 43
    breakstmt    go to state 44
    constmt      go to state 45
    termination  go to state 46


State 229

  112 then: sstmt .

    $default  reduce using rule 112 (then)


State 230

  108 ifstmt: IF '(' expr ')' then .
  109       | IF '(' expr ')' then . ELSE then
  110       | IF '(' expr ')' then . ELSE ifstmt

    ELSE  shift, and go to state 265

    $default  reduce using rule 108 (ifstmt)


State 231

   85 a: DEF var EQ . terms

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 266


State 232

   84 a: DT var EQ . terms

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 267


State 233

   77 forpart: '{' . sstmts '}'

    ID        shift, and go to state 1
    IF        shift, and go to state 2
    FOR       shift, and go to state 3
    WHILE     shift, and go to state 4
    DO        shift, and go to state 5
    SWITCH    shift, and go to state 6
    RET       shift, and go to state 7
    BREAK     shift, and go to state 8
    IMPORT    shift, and go to state 9
    CONTINUE  shift, and go to state 10
    PRINTLN   shift, and go to state 11
    PRINT     shift, and go to state 12
    DEF       shift, and go to state 101
    CONST     shift, and go to state 14
    SYSTEM    shift, and go to state 15
    TERM      shift, and go to state 16
    '('       shift, and go to state 17
    DT        shift, and go to state 102

    sstmts       go to state 268
    sstmt        go to state 21
    cstmt        go to state 22
    while        go to state 23
    dowhilestmt  go to state 24
    ret          go to state 25
    println      go to state 26
    print        go to state 27
    import       go to state 28
    const        go to state 29
    varDeclare   go to state 30
    mulDeclare   go to state 31
    varAssign    go to state 32
    mulAssign    go to state 33
    input        go to state 34
    infunction   go to state 35
    forloop      go to state 36
    var          go to state 37
    arr          go to state 38
    incdec       go to state 39
    funcall      go to state 41
    ifstmt       go to state 42
    switchstmt   go to state 43
    breakstmt    go to state 44
    constmt      go to state 45
    termination  go to state 46


State 234

   78 forpart: sstmt .

    $default  reduce using rule 78 (forpart)


State 235

   76 forloop: FOR '(' forstmt ')' forpart .

    $default  reduce using rule 76 (forloop)


State 236

   79 forstmt: a TERM b . TERM incdec
   80        | a TERM b . TERM varAssign

    TERM  shift, and go to state 269


State 237

   32 expr: bexpr .
   87 b: bexpr .

    TERM      reduce using rule 87 (b)
    $default  reduce using rule 32 (expr)


State 238

   81 forstmt: var IN var .

    $default  reduce using rule 81 (forstmt)


State 239

   33 expr: terms .
   83 a: var EQ terms .
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  137 bexpr_: terms .

    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    TERM      reduce using rule 83 (a)
    QUES      reduce using rule 33 (expr)
    $default  reduce using rule 137 (bexpr_)

    op  go to state 147


State 240

   26 while: WHILE '(' expr ')' '{' . sstmts '}'

    ID        shift, and go to state 1
    IF        shift, and go to state 2
    FOR       shift, and go to state 3
    WHILE     shift, and go to state 4
    DO        shift, and go to state 5
    SWITCH    shift, and go to state 6
    RET       shift, and go to state 7
    BREAK     shift, and go to state 8
    IMPORT    shift, and go to state 9
    CONTINUE  shift, and go to state 10
    PRINTLN   shift, and go to state 11
    PRINT     shift, and go to state 12
    DEF       shift, and go to state 101
    CONST     shift, and go to state 14
    SYSTEM    shift, and go to state 15
    TERM      shift, and go to state 16
    '('       shift, and go to state 17
    DT        shift, and go to state 102

    sstmts       go to state 270
    sstmt        go to state 21
    cstmt        go to state 22
    while        go to state 23
    dowhilestmt  go to state 24
    ret          go to state 25
    println      go to state 26
    print        go to state 27
    import       go to state 28
    const        go to state 29
    varDeclare   go to state 30
    mulDeclare   go to state 31
    varAssign    go to state 32
    mulAssign    go to state 33
    input        go to state 34
    infunction   go to state 35
    forloop      go to state 36
    var          go to state 37
    arr          go to state 38
    incdec       go to state 39
    funcall      go to state 41
    ifstmt       go to state 42
    switchstmt   go to state 43
    breakstmt    go to state 44
    constmt      go to state 45
    termination  go to state 46


State 241

   27 dowhilestmt: DO '{' sstmts '}' WHILE . '(' expr ')' termination

    '('  shift, and go to state 271


State 242

  113 switchstmt: SWITCH '(' expr ')' '{' . cases '}'

    $default  reduce using rule 114 (cases)

    cases  go to state 272


State 243

   33 expr: terms .
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  137 bexpr_: terms .
  142 elvisop: expr QUES COLON terms .

    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    TERM      reduce using rule 142 (elvisop)
    ')'       reduce using rule 142 (elvisop)
    COMMA     reduce using rule 142 (elvisop)
    QUES      reduce using rule 33 (expr)
    QUES      [reduce using rule 142 (elvisop)]
    $default  reduce using rule 137 (bexpr_)

    op  go to state 147


State 244

  141 terstmt: expr QUES terms COLON . terms

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 273


State 245

  102 arg: DT ID .
  103    | DT ID . EQ expr

    EQ  shift, and go to state 274

    $default  reduce using rule 102 (arg)


State 246

   98 fundef: DEF ID '(' arglist ')' . '{' sstmts '}'

    '{'  shift, and go to state 275


State 247

   99 arglist: arglist COMMA . arg

    DT  shift, and go to state 206

    $default  reduce using rule 101 (arg)

    arg  go to state 276


State 248

   70 input: DEF ID EQ ID DOT . READLINE '(' ')' termination

    READLINE  shift, and go to state 277


State 249

   69 input: DEF ID EQ SYSTEM DOT . IN DOT CONSOLE '(' ')' DOT READLINE '(' ')' termination
   75 infunction: SYSTEM DOT . IN DOT NEWREADER '(' ')' DOT READLINE '(' ')'

    IN  shift, and go to state 278


State 250

   46 varDeclare: DEF ID EQ '[' H . ']' termination

    ']'  shift, and go to state 279


State 251

   50 E: ID EQ expr COMMA . E

    ID  shift, and go to state 169

    E  go to state 280


State 252

   68 input: DEF ID EQ infunction AS . DT termination

    DT  shift, and go to state 281


State 253

   67 input: DEF ID EQ infunction termination .

    $default  reduce using rule 67 (input)


State 254

   48 mulDeclare: DEF '(' G ')' EQ . '[' H ']' termination

    '['  shift, and go to state 282


State 255

   43 const: CONST ID EQ terms termination .

    $default  reduce using rule 43 (const)


State 256

   75 infunction: SYSTEM DOT IN DOT NEWREADER . '(' ')' DOT READLINE '(' ')'

    '('  shift, and go to state 283


State 257

   60 G: DT ID COMMA G .

    $default  reduce using rule 60 (G)


State 258

   58 mulAssign: '(' G ')' EQ '[' . H ']'

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    '['     shift, and go to state 175
    NOT     shift, and go to state 73

    expr     go to state 111
    H        go to state 284
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 177


State 259

   97 fundef: DT ID '(' arglist ')' . '{' sstmts '}'

    '{'  shift, and go to state 285


State 260

   71 input: ID EQ ID DOT READLINE '(' . ')' termination

    ')'  shift, and go to state 286


State 261

   63 H: '[' H ']' . COMMA H
   66  | '[' H ']' .

    COMMA  shift, and go to state 287

    $default  reduce using rule 66 (H)


State 262

   64 H: terms COMMA H .

    $default  reduce using rule 64 (H)


State 263

   74 input: ID EQ infunction AS DT termination .

    $default  reduce using rule 74 (input)


State 264

  111 then: '{' sstmts . '}'

    '}'  shift, and go to state 288


State 265

  109 ifstmt: IF '(' expr ')' then ELSE . then
  110       | IF '(' expr ')' then ELSE . ifstmt

    ID        shift, and go to state 1
    IF        shift, and go to state 2
    RET       shift, and go to state 7
    BREAK     shift, and go to state 8
    IMPORT    shift, and go to state 9
    CONTINUE  shift, and go to state 10
    PRINTLN   shift, and go to state 11
    PRINT     shift, and go to state 12
    DEF       shift, and go to state 101
    CONST     shift, and go to state 14
    SYSTEM    shift, and go to state 15
    TERM      shift, and go to state 16
    '{'       shift, and go to state 228
    '('       shift, and go to state 17
    DT        shift, and go to state 102

    sstmt        go to state 229
    ret          go to state 25
    println      go to state 26
    print        go to state 27
    import       go to state 28
    const        go to state 29
    varDeclare   go to state 30
    mulDeclare   go to state 31
    varAssign    go to state 32
    mulAssign    go to state 33
    input        go to state 34
    infunction   go to state 35
    var          go to state 37
    arr          go to state 38
    incdec       go to state 39
    funcall      go to state 41
    ifstmt       go to state 289
    then         go to state 290
    breakstmt    go to state 44
    constmt      go to state 45
    termination  go to state 46


State 266

   33 expr: terms .
   85 a: DEF var EQ terms .
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  137 bexpr_: terms .

    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    TERM      reduce using rule 85 (a)
    QUES      reduce using rule 33 (expr)
    $default  reduce using rule 137 (bexpr_)

    op  go to state 147


State 267

   33 expr: terms .
   84 a: DT var EQ terms .
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  137 bexpr_: terms .

    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    TERM      reduce using rule 84 (a)
    QUES      reduce using rule 33 (expr)
    $default  reduce using rule 137 (bexpr_)

    op  go to state 147


State 268

   77 forpart: '{' sstmts . '}'

    '}'  shift, and go to state 291


State 269

   79 forstmt: a TERM b TERM . incdec
   80        | a TERM b TERM . varAssign

    ID   shift, and go to state 292
    '('  shift, and go to state 17

    varAssign  go to state 293
    mulAssign  go to state 33
    var        go to state 37
    arr        go to state 38
    incdec     go to state 294


State 270

   26 while: WHILE '(' expr ')' '{' sstmts . '}'

    '}'  shift, and go to state 295


State 271

   27 dowhilestmt: DO '{' sstmts '}' WHILE '(' . expr ')' termination

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 296
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 272

  113 switchstmt: SWITCH '(' expr ')' '{' cases . '}'
  115 cases: cases . case

    CASE  shift, and go to state 297
    '}'   shift, and go to state 298

    case  go to state 299


State 273

   33 expr: terms .
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  137 bexpr_: terms .
  141 terstmt: expr QUES terms COLON terms .

    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    PLUS      [reduce using rule 141 (terstmt)]
    MIN       [reduce using rule 141 (terstmt)]
    MUL       [reduce using rule 141 (terstmt)]
    DIV       [reduce using rule 141 (terstmt)]
    POW       [reduce using rule 141 (terstmt)]
    RELOP     reduce using rule 137 (bexpr_)
    RELOP     [reduce using rule 141 (terstmt)]
    LOGOP     reduce using rule 137 (bexpr_)
    LOGOP     [reduce using rule 141 (terstmt)]
    BITOP     [reduce using rule 141 (terstmt)]
    QUES      reduce using rule 33 (expr)
    QUES      [reduce using rule 141 (terstmt)]
    MOD       [reduce using rule 141 (terstmt)]
    AND       reduce using rule 137 (bexpr_)
    AND       [reduce using rule 141 (terstmt)]
    OR        reduce using rule 137 (bexpr_)
    OR        [reduce using rule 141 (terstmt)]
    $default  reduce using rule 141 (terstmt)

    op  go to state 147


State 274

  103 arg: DT ID EQ . expr

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 300
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 275

   98 fundef: DEF ID '(' arglist ')' '{' . sstmts '}'

    ID        shift, and go to state 1
    IF        shift, and go to state 2
    FOR       shift, and go to state 3
    WHILE     shift, and go to state 4
    DO        shift, and go to state 5
    SWITCH    shift, and go to state 6
    RET       shift, and go to state 7
    BREAK     shift, and go to state 8
    IMPORT    shift, and go to state 9
    CONTINUE  shift, and go to state 10
    PRINTLN   shift, and go to state 11
    PRINT     shift, and go to state 12
    DEF       shift, and go to state 101
    CONST     shift, and go to state 14
    SYSTEM    shift, and go to state 15
    TERM      shift, and go to state 16
    '('       shift, and go to state 17
    DT        shift, and go to state 102

    sstmts       go to state 301
    sstmt        go to state 21
    cstmt        go to state 22
    while        go to state 23
    dowhilestmt  go to state 24
    ret          go to state 25
    println      go to state 26
    print        go to state 27
    import       go to state 28
    const        go to state 29
    varDeclare   go to state 30
    mulDeclare   go to state 31
    varAssign    go to state 32
    mulAssign    go to state 33
    input        go to state 34
    infunction   go to state 35
    forloop      go to state 36
    var          go to state 37
    arr          go to state 38
    incdec       go to state 39
    funcall      go to state 41
    ifstmt       go to state 42
    switchstmt   go to state 43
    breakstmt    go to state 44
    constmt      go to state 45
    termination  go to state 46


State 276

   99 arglist: arglist COMMA arg .

    $default  reduce using rule 99 (arglist)


State 277

   70 input: DEF ID EQ ID DOT READLINE . '(' ')' termination

    '('  shift, and go to state 302


State 278

   69 input: DEF ID EQ SYSTEM DOT IN . DOT CONSOLE '(' ')' DOT READLINE '(' ')' termination
   75 infunction: SYSTEM DOT IN . DOT NEWREADER '(' ')' DOT READLINE '(' ')'

    DOT  shift, and go to state 303


State 279

   46 varDeclare: DEF ID EQ '[' H ']' . termination

    TERM  shift, and go to state 16

    termination  go to state 304


State 280

   50 E: ID EQ expr COMMA E .

    $default  reduce using rule 50 (E)


State 281

   68 input: DEF ID EQ infunction AS DT . termination

    TERM  shift, and go to state 16

    termination  go to state 305


State 282

   48 mulDeclare: DEF '(' G ')' EQ '[' . H ']' termination

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    '['     shift, and go to state 175
    NOT     shift, and go to state 73

    expr     go to state 111
    H        go to state 306
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 177


State 283

   75 infunction: SYSTEM DOT IN DOT NEWREADER '(' . ')' DOT READLINE '(' ')'

    ')'  shift, and go to state 307


State 284

   58 mulAssign: '(' G ')' EQ '[' H . ']'

    ']'  shift, and go to state 308


State 285

   97 fundef: DT ID '(' arglist ')' '{' . sstmts '}'

    ID        shift, and go to state 1
    IF        shift, and go to state 2
    FOR       shift, and go to state 3
    WHILE     shift, and go to state 4
    DO        shift, and go to state 5
    SWITCH    shift, and go to state 6
    RET       shift, and go to state 7
    BREAK     shift, and go to state 8
    IMPORT    shift, and go to state 9
    CONTINUE  shift, and go to state 10
    PRINTLN   shift, and go to state 11
    PRINT     shift, and go to state 12
    DEF       shift, and go to state 101
    CONST     shift, and go to state 14
    SYSTEM    shift, and go to state 15
    TERM      shift, and go to state 16
    '('       shift, and go to state 17
    DT        shift, and go to state 102

    sstmts       go to state 309
    sstmt        go to state 21
    cstmt        go to state 22
    while        go to state 23
    dowhilestmt  go to state 24
    ret          go to state 25
    println      go to state 26
    print        go to state 27
    import       go to state 28
    const        go to state 29
    varDeclare   go to state 30
    mulDeclare   go to state 31
    varAssign    go to state 32
    mulAssign    go to state 33
    input        go to state 34
    infunction   go to state 35
    forloop      go to state 36
    var          go to state 37
    arr          go to state 38
    incdec       go to state 39
    funcall      go to state 41
    ifstmt       go to state 42
    switchstmt   go to state 43
    breakstmt    go to state 44
    constmt      go to state 45
    termination  go to state 46


State 286

   71 input: ID EQ ID DOT READLINE '(' ')' . termination

    TERM  shift, and go to state 16

    termination  go to state 310


State 287

   63 H: '[' H ']' COMMA . H

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    '['     shift, and go to state 175
    NOT     shift, and go to state 73

    expr     go to state 111
    H        go to state 311
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 177


State 288

  111 then: '{' sstmts '}' .

    $default  reduce using rule 111 (then)


State 289

  110 ifstmt: IF '(' expr ')' then ELSE ifstmt .

    $default  reduce using rule 110 (ifstmt)


State 290

  109 ifstmt: IF '(' expr ')' then ELSE then .

    $default  reduce using rule 109 (ifstmt)


State 291

   77 forpart: '{' sstmts '}' .

    $default  reduce using rule 77 (forpart)


State 292

   53 varAssign: ID . EQ expr
   54          | ID . EQ '[' H ']'
   56          | ID . op EQ terms
   57          | ID . elvisassignmentop terms
   88 var: ID .
   90 arr: ID . dims

    '['   shift, and go to state 48
    PLUS  shift, and go to state 49
    MIN   shift, and go to state 50
    MUL   shift, and go to state 51
    DIV   shift, and go to state 52
    POW   shift, and go to state 53
    EQ    shift, and go to state 312
    QUES  shift, and go to state 55
    MOD   shift, and go to state 56

    $default  reduce using rule 88 (var)

    dims               go to state 57
    dim                go to state 58
    op                 go to state 59
    elvisassignmentop  go to state 60


State 293

   80 forstmt: a TERM b TERM varAssign .

    $default  reduce using rule 80 (forstmt)


State 294

   79 forstmt: a TERM b TERM incdec .

    $default  reduce using rule 79 (forstmt)


State 295

   26 while: WHILE '(' expr ')' '{' sstmts '}' .

    $default  reduce using rule 26 (while)


State 296

   27 dowhilestmt: DO '{' sstmts '}' WHILE '(' expr . ')' termination
  141 terstmt: expr . QUES terms COLON terms
  142 elvisop: expr . QUES COLON terms

    ')'   shift, and go to state 313
    QUES  shift, and go to state 138


State 297

  116 case: CASE . terms COLON sstmts

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    NOT     shift, and go to state 73

    expr     go to state 111
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 314


State 298

  113 switchstmt: SWITCH '(' expr ')' '{' cases '}' .

    $default  reduce using rule 113 (switchstmt)


State 299

  115 cases: cases case .

    $default  reduce using rule 115 (cases)


State 300

  103 arg: DT ID EQ expr .
  141 terstmt: expr . QUES terms COLON terms
  142 elvisop: expr . QUES COLON terms

    QUES  shift, and go to state 138

    $default  reduce using rule 103 (arg)


State 301

   98 fundef: DEF ID '(' arglist ')' '{' sstmts . '}'

    '}'  shift, and go to state 315


State 302

   70 input: DEF ID EQ ID DOT READLINE '(' . ')' termination

    ')'  shift, and go to state 316


State 303

   69 input: DEF ID EQ SYSTEM DOT IN DOT . CONSOLE '(' ')' DOT READLINE '(' ')' termination
   75 infunction: SYSTEM DOT IN DOT . NEWREADER '(' ')' DOT READLINE '(' ')'

    CONSOLE    shift, and go to state 317
    NEWREADER  shift, and go to state 256


State 304

   46 varDeclare: DEF ID EQ '[' H ']' termination .

    $default  reduce using rule 46 (varDeclare)


State 305

   68 input: DEF ID EQ infunction AS DT termination .

    $default  reduce using rule 68 (input)


State 306

   48 mulDeclare: DEF '(' G ')' EQ '[' H . ']' termination

    ']'  shift, and go to state 318


State 307

   75 infunction: SYSTEM DOT IN DOT NEWREADER '(' ')' . DOT READLINE '(' ')'

    DOT  shift, and go to state 319


State 308

   58 mulAssign: '(' G ')' EQ '[' H ']' .

    $default  reduce using rule 58 (mulAssign)


State 309

   97 fundef: DT ID '(' arglist ')' '{' sstmts . '}'

    '}'  shift, and go to state 320


State 310

   71 input: ID EQ ID DOT READLINE '(' ')' termination .

    $default  reduce using rule 71 (input)


State 311

   63 H: '[' H ']' COMMA H .

    $default  reduce using rule 63 (H)


State 312

   53 varAssign: ID EQ . expr
   54          | ID EQ . '[' H ']'

    ID      shift, and go to state 66
    REAL    shift, and go to state 67
    INT     shift, and go to state 68
    STRING  shift, and go to state 69
    TRUE    shift, and go to state 70
    FALSE   shift, and go to state 71
    '('     shift, and go to state 72
    '['     shift, and go to state 117
    NOT     shift, and go to state 73

    expr     go to state 118
    var      go to state 76
    arr      go to state 38
    aexpr    go to state 77
    bexpr    go to state 78
    bexpr_   go to state 79
    terstmt  go to state 80
    elvisop  go to state 81
    terms    go to state 82


State 313

   27 dowhilestmt: DO '{' sstmts '}' WHILE '(' expr ')' . termination

    TERM  shift, and go to state 16

    termination  go to state 321


State 314

   33 expr: terms .
  116 case: CASE terms . COLON sstmts
  119 aexpr: terms . op terms
  120      | terms . BITOP terms
  137 bexpr_: terms .

    COLON  shift, and go to state 322
    PLUS   shift, and go to state 49
    MIN    shift, and go to state 50
    MUL    shift, and go to state 51
    DIV    shift, and go to state 52
    POW    shift, and go to state 53
    BITOP  shift, and go to state 146
    MOD    shift, and go to state 56

    QUES      reduce using rule 33 (expr)
    $default  reduce using rule 137 (bexpr_)

    op  go to state 147


State 315

   98 fundef: DEF ID '(' arglist ')' '{' sstmts '}' .

    $default  reduce using rule 98 (fundef)


State 316

   70 input: DEF ID EQ ID DOT READLINE '(' ')' . termination

    TERM  shift, and go to state 16

    termination  go to state 323


State 317

   69 input: DEF ID EQ SYSTEM DOT IN DOT CONSOLE . '(' ')' DOT READLINE '(' ')' termination

    '('  shift, and go to state 324


State 318

   48 mulDeclare: DEF '(' G ')' EQ '[' H ']' . termination

    TERM  shift, and go to state 16

    termination  go to state 325


State 319

   75 infunction: SYSTEM DOT IN DOT NEWREADER '(' ')' DOT . READLINE '(' ')'

    READLINE  shift, and go to state 326


State 320

   97 fundef: DT ID '(' arglist ')' '{' sstmts '}' .

    $default  reduce using rule 97 (fundef)


State 321

   27 dowhilestmt: DO '{' sstmts '}' WHILE '(' expr ')' termination .

    $default  reduce using rule 27 (dowhilestmt)


State 322

  116 case: CASE terms COLON . sstmts

    ID        shift, and go to state 1
    IF        shift, and go to state 2
    FOR       shift, and go to state 3
    WHILE     shift, and go to state 4
    DO        shift, and go to state 5
    SWITCH    shift, and go to state 6
    RET       shift, and go to state 7
    BREAK     shift, and go to state 8
    IMPORT    shift, and go to state 9
    CONTINUE  shift, and go to state 10
    PRINTLN   shift, and go to state 11
    PRINT     shift, and go to state 12
    DEF       shift, and go to state 101
    CONST     shift, and go to state 14
    SYSTEM    shift, and go to state 15
    TERM      shift, and go to state 16
    '('       shift, and go to state 17
    DT        shift, and go to state 102

    sstmts       go to state 327
    sstmt        go to state 21
    cstmt        go to state 22
    while        go to state 23
    dowhilestmt  go to state 24
    ret          go to state 25
    println      go to state 26
    print        go to state 27
    import       go to state 28
    const        go to state 29
    varDeclare   go to state 30
    mulDeclare   go to state 31
    varAssign    go to state 32
    mulAssign    go to state 33
    input        go to state 34
    infunction   go to state 35
    forloop      go to state 36
    var          go to state 37
    arr          go to state 38
    incdec       go to state 39
    funcall      go to state 41
    ifstmt       go to state 42
    switchstmt   go to state 43
    breakstmt    go to state 44
    constmt      go to state 45
    termination  go to state 46


State 323

   70 input: DEF ID EQ ID DOT READLINE '(' ')' termination .

    $default  reduce using rule 70 (input)


State 324

   69 input: DEF ID EQ SYSTEM DOT IN DOT CONSOLE '(' . ')' DOT READLINE '(' ')' termination

    ')'  shift, and go to state 328


State 325

   48 mulDeclare: DEF '(' G ')' EQ '[' H ']' termination .

    $default  reduce using rule 48 (mulDeclare)


State 326

   75 infunction: SYSTEM DOT IN DOT NEWREADER '(' ')' DOT READLINE . '(' ')'

    '('  shift, and go to state 329


State 327

  116 case: CASE terms COLON sstmts .

    $default  reduce using rule 116 (case)


State 328

   69 input: DEF ID EQ SYSTEM DOT IN DOT CONSOLE '(' ')' . DOT READLINE '(' ')' termination

    DOT  shift, and go to state 330


State 329

   75 infunction: SYSTEM DOT IN DOT NEWREADER '(' ')' DOT READLINE '(' . ')'

    ')'  shift, and go to state 331


State 330

   69 input: DEF ID EQ SYSTEM DOT IN DOT CONSOLE '(' ')' DOT . READLINE '(' ')' termination

    READLINE  shift, and go to state 332


State 331

   75 infunction: SYSTEM DOT IN DOT NEWREADER '(' ')' DOT READLINE '(' ')' .

    $default  reduce using rule 75 (infunction)


State 332

   69 input: DEF ID EQ SYSTEM DOT IN DOT CONSOLE '(' ')' DOT READLINE . '(' ')' termination

    '('  shift, and go to state 333


State 333

   69 input: DEF ID EQ SYSTEM DOT IN DOT CONSOLE '(' ')' DOT READLINE '(' . ')' termination

    ')'  shift, and go to state 334


State 334

   69 input: DEF ID EQ SYSTEM DOT IN DOT CONSOLE '(' ')' DOT READLINE '(' ')' . termination

    TERM  shift, and go to state 16

    termination  go to state 335


State 335

   69 input: DEF ID EQ SYSTEM DOT IN DOT CONSOLE '(' ')' DOT READLINE '(' ')' termination .

    $default  reduce using rule 69 (input)
